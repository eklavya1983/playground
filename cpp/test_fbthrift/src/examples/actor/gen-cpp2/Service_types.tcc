/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "Service_types.h"

#include <thrift/lib/cpp/TApplicationException.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>
#include <thrift/lib/cpp2/protocol/DebugProtocol.h>
#include <thrift/lib/cpp2/protocol/VirtualProtocol.h>

namespace actor { namespace cpp2 {

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t ActorId::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "systemId") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "localId") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->systemId);
          this->__isset.systemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->localId);
          this->__isset.localId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t ActorId::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ActorId");
  xfer += prot_->serializedFieldSize("systemId", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->systemId);
  xfer += prot_->serializedFieldSize("localId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->localId);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ActorId::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ActorId");
  xfer += prot_->serializedFieldSize("systemId", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->systemId);
  xfer += prot_->serializedFieldSize("localId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->localId);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ActorId::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ActorId");
  xfer += prot_->writeFieldBegin("systemId", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->systemId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("localId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->localId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t ActorMsgHeader::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "direction") {
        fid = 1;
        ftype = apache::thrift::protocol::T_BYTE;
      }
      else if (fname == "typeId") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "from") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "to") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "requestId") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "status") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->direction);
          this->__isset.direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->typeId);
          this->__isset.typeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::read(iprot, &this->from);
          this->__isset.from = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::read(iprot, &this->to);
          this->__isset.to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t ActorMsgHeader::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ActorMsgHeader");
  xfer += prot_->serializedFieldSize("direction", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->direction);
  xfer += prot_->serializedFieldSize("typeId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->typeId);
  xfer += prot_->serializedFieldSize("from", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::serializedSize(prot_, &this->from);
  xfer += prot_->serializedFieldSize("to", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::serializedSize(prot_, &this->to);
  xfer += prot_->serializedFieldSize("requestId", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->requestId);
  xfer += prot_->serializedFieldSize("status", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->status);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ActorMsgHeader::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ActorMsgHeader");
  xfer += prot_->serializedFieldSize("direction", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->direction);
  xfer += prot_->serializedFieldSize("typeId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->typeId);
  xfer += prot_->serializedFieldSize("from", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::serializedSizeZC(prot_, &this->from);
  xfer += prot_->serializedFieldSize("to", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::serializedSizeZC(prot_, &this->to);
  xfer += prot_->serializedFieldSize("requestId", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->requestId);
  xfer += prot_->serializedFieldSize("status", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->status);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ActorMsgHeader::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ActorMsgHeader");
  xfer += prot_->writeFieldBegin("direction", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->writeByte(this->direction);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("typeId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->typeId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("from", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::write(prot_, &this->from);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("to", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::write(prot_, &this->to);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("requestId", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->requestId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("status", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->status);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t ReplicaGroupInfo::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "replicaId") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "version") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "replicaServices") {
        fid = 3;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "healthyServices") {
        fid = 4;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "unhealthyServices") {
        fid = 5;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->replicaId);
          this->__isset.replicaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->replicaServices.clear();
          uint32_t _size0;
          apache::thrift::protocol::TType _etype3;
          xfer += iprot->readListBegin(_etype3, _size0);
          uint32_t _i4;
          if (_size0 == std::numeric_limits<uint32_t>::max()) {
            for (_i4 = 0; iprot->peekList(); _i4++) {
              this->replicaServices.resize(_i4 + 1);
              xfer += iprot->readI32(this->replicaServices[_i4]);
            }
          }
          else {
            this->replicaServices.resize(_size0);
            for (_i4 = 0; _i4 < _size0; ++_i4) {
              xfer += iprot->readI32(this->replicaServices[_i4]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.replicaServices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->healthyServices.clear();
          uint32_t _size5;
          apache::thrift::protocol::TType _etype8;
          xfer += iprot->readListBegin(_etype8, _size5);
          uint32_t _i9;
          if (_size5 == std::numeric_limits<uint32_t>::max()) {
            for (_i9 = 0; iprot->peekList(); _i9++) {
              this->healthyServices.resize(_i9 + 1);
              xfer += iprot->readI32(this->healthyServices[_i9]);
            }
          }
          else {
            this->healthyServices.resize(_size5);
            for (_i9 = 0; _i9 < _size5; ++_i9) {
              xfer += iprot->readI32(this->healthyServices[_i9]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.healthyServices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->unhealthyServices.clear();
          uint32_t _size10;
          apache::thrift::protocol::TType _etype13;
          xfer += iprot->readListBegin(_etype13, _size10);
          uint32_t _i14;
          if (_size10 == std::numeric_limits<uint32_t>::max()) {
            for (_i14 = 0; iprot->peekList(); _i14++) {
              this->unhealthyServices.resize(_i14 + 1);
              xfer += iprot->readI32(this->unhealthyServices[_i14]);
            }
          }
          else {
            this->unhealthyServices.resize(_size10);
            for (_i14 = 0; _i14 < _size10; ++_i14) {
              xfer += iprot->readI32(this->unhealthyServices[_i14]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.unhealthyServices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t ReplicaGroupInfo::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ReplicaGroupInfo");
  xfer += prot_->serializedFieldSize("replicaId", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->replicaId);
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->version);
  xfer += prot_->serializedFieldSize("replicaServices", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->replicaServices.size());
  for (auto _iter15 = this->replicaServices.begin(); _iter15 != this->replicaServices.end(); ++_iter15) {
    xfer += prot_->serializedSizeI32((*_iter15));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("healthyServices", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->healthyServices.size());
  for (auto _iter16 = this->healthyServices.begin(); _iter16 != this->healthyServices.end(); ++_iter16) {
    xfer += prot_->serializedSizeI32((*_iter16));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("unhealthyServices", apache::thrift::protocol::T_LIST, 5);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->unhealthyServices.size());
  for (auto _iter17 = this->unhealthyServices.begin(); _iter17 != this->unhealthyServices.end(); ++_iter17) {
    xfer += prot_->serializedSizeI32((*_iter17));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ReplicaGroupInfo::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ReplicaGroupInfo");
  xfer += prot_->serializedFieldSize("replicaId", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->replicaId);
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->version);
  xfer += prot_->serializedFieldSize("replicaServices", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->replicaServices.size());
  for (auto _iter18 = this->replicaServices.begin(); _iter18 != this->replicaServices.end(); ++_iter18) {
    xfer += prot_->serializedSizeI32((*_iter18));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("healthyServices", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->healthyServices.size());
  for (auto _iter19 = this->healthyServices.begin(); _iter19 != this->healthyServices.end(); ++_iter19) {
    xfer += prot_->serializedSizeI32((*_iter19));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("unhealthyServices", apache::thrift::protocol::T_LIST, 5);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->unhealthyServices.size());
  for (auto _iter20 = this->unhealthyServices.begin(); _iter20 != this->unhealthyServices.end(); ++_iter20) {
    xfer += prot_->serializedSizeI32((*_iter20));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ReplicaGroupInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ReplicaGroupInfo");
  xfer += prot_->writeFieldBegin("replicaId", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->replicaId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("version", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->version);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("replicaServices", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, this->replicaServices.size());
  for (auto _iter21 = this->replicaServices.begin(); _iter21 != this->replicaServices.end(); ++_iter21) {
    xfer += prot_->writeI32((*_iter21));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("healthyServices", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, this->healthyServices.size());
  for (auto _iter22 = this->healthyServices.begin(); _iter22 != this->healthyServices.end(); ++_iter22) {
    xfer += prot_->writeI32((*_iter22));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("unhealthyServices", apache::thrift::protocol::T_LIST, 5);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, this->unhealthyServices.size());
  for (auto _iter23 = this->unhealthyServices.begin(); _iter23 != this->unhealthyServices.end(); ++_iter23) {
    xfer += prot_->writeI32((*_iter23));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t ReplicaRequestHeader::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "actorHdr") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "replicaId") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "version") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorMsgHeader>::read(iprot, &this->actorHdr);
          this->__isset.actorHdr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->replicaId);
          this->__isset.replicaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t ReplicaRequestHeader::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ReplicaRequestHeader");
  xfer += prot_->serializedFieldSize("actorHdr", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorMsgHeader>::serializedSize(prot_, &this->actorHdr);
  xfer += prot_->serializedFieldSize("replicaId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->replicaId);
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->version);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ReplicaRequestHeader::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ReplicaRequestHeader");
  xfer += prot_->serializedFieldSize("actorHdr", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorMsgHeader>::serializedSizeZC(prot_, &this->actorHdr);
  xfer += prot_->serializedFieldSize("replicaId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->replicaId);
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->version);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ReplicaRequestHeader::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ReplicaRequestHeader");
  xfer += prot_->writeFieldBegin("actorHdr", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorMsgHeader>::write(prot_, &this->actorHdr);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("replicaId", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->replicaId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("version", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->version);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t ActorInfo::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "type") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "id") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "ip") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "port") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "incarnation") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::read(iprot, &this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->incarnation);
          this->__isset.incarnation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t ActorInfo::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ActorInfo");
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->type);
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::serializedSize(prot_, &this->id);
  xfer += prot_->serializedFieldSize("ip", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->ip);
  xfer += prot_->serializedFieldSize("port", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->port);
  xfer += prot_->serializedFieldSize("incarnation", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->incarnation);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ActorInfo::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ActorInfo");
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->type);
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::serializedSizeZC(prot_, &this->id);
  xfer += prot_->serializedFieldSize("ip", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->ip);
  xfer += prot_->serializedFieldSize("port", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->port);
  xfer += prot_->serializedFieldSize("incarnation", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->incarnation);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ActorInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ActorInfo");
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::write(prot_, &this->id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ip", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->ip);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("port", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->port);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("incarnation", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->incarnation);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t Init::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Init::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Init");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Init::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Init");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Init::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Init");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t Other::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Other::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Other");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Other::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Other");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Other::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Other");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t GetActorRegistry::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GetActorRegistry::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetActorRegistry");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetActorRegistry::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetActorRegistry");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetActorRegistry::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GetActorRegistry");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t GetActorRegistryResp::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "infoList") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->infoList.clear();
          uint32_t _size24;
          apache::thrift::protocol::TType _etype27;
          xfer += iprot->readListBegin(_etype27, _size24);
          uint32_t _i28;
          if (_size24 == std::numeric_limits<uint32_t>::max()) {
            for (_i28 = 0; iprot->peekList(); _i28++) {
              this->infoList.resize(_i28 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::read(iprot, &this->infoList[_i28]);
            }
          }
          else {
            this->infoList.resize(_size24);
            for (_i28 = 0; _i28 < _size24; ++_i28) {
              xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::read(iprot, &this->infoList[_i28]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.infoList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GetActorRegistryResp::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetActorRegistryResp");
  xfer += prot_->serializedFieldSize("infoList", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->infoList.size());
  for (auto _iter29 = this->infoList.begin(); _iter29 != this->infoList.end(); ++_iter29) {
    xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::serializedSize(prot_, &(*_iter29));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetActorRegistryResp::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetActorRegistryResp");
  xfer += prot_->serializedFieldSize("infoList", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->infoList.size());
  for (auto _iter30 = this->infoList.begin(); _iter30 != this->infoList.end(); ++_iter30) {
    xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::serializedSizeZC(prot_, &(*_iter30));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetActorRegistryResp::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GetActorRegistryResp");
  xfer += prot_->writeFieldBegin("infoList", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->infoList.size());
  for (auto _iter31 = this->infoList.begin(); _iter31 != this->infoList.end(); ++_iter31) {
    xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::write(prot_, &(*_iter31));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t UpdateActorRegistry::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t UpdateActorRegistry::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UpdateActorRegistry");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UpdateActorRegistry::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UpdateActorRegistry");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UpdateActorRegistry::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("UpdateActorRegistry");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t UpdateActorInfo::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "info") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::read(iprot, &this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t UpdateActorInfo::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UpdateActorInfo");
  xfer += prot_->serializedFieldSize("info", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::serializedSize(prot_, &this->info);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UpdateActorInfo::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UpdateActorInfo");
  xfer += prot_->serializedFieldSize("info", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::serializedSizeZC(prot_, &this->info);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UpdateActorInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("UpdateActorInfo");
  xfer += prot_->writeFieldBegin("info", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::write(prot_, &this->info);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t RegisterException::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t RegisterException::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RegisterException");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RegisterException::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RegisterException");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RegisterException::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RegisterException");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t GroupAddVolume::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "replicaInfo") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "volumeId") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "volumeName") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ReplicaGroupInfo>::read(iprot, &this->replicaInfo);
          this->__isset.replicaInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->volumeId);
          this->__isset.volumeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->volumeName);
          this->__isset.volumeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GroupAddVolume::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupAddVolume");
  xfer += prot_->serializedFieldSize("replicaInfo", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ReplicaGroupInfo>::serializedSize(prot_, &this->replicaInfo);
  xfer += prot_->serializedFieldSize("volumeId", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->volumeId);
  xfer += prot_->serializedFieldSize("volumeName", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->volumeName);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupAddVolume::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupAddVolume");
  xfer += prot_->serializedFieldSize("replicaInfo", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ReplicaGroupInfo>::serializedSizeZC(prot_, &this->replicaInfo);
  xfer += prot_->serializedFieldSize("volumeId", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->volumeId);
  xfer += prot_->serializedFieldSize("volumeName", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->volumeName);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupAddVolume::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GroupAddVolume");
  xfer += prot_->writeFieldBegin("replicaInfo", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ReplicaGroupInfo>::write(prot_, &this->replicaInfo);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("volumeId", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->volumeId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("volumeName", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->volumeName);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t GroupPutObject::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GroupPutObject::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupPutObject");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupPutObject::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupPutObject");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupPutObject::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GroupPutObject");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t GroupPutObjectResp::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GroupPutObjectResp::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupPutObjectResp");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupPutObjectResp::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupPutObjectResp");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupPutObjectResp::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GroupPutObjectResp");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t GroupGetObject::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GroupGetObject::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupGetObject");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupGetObject::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupGetObject");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupGetObject::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GroupGetObject");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template <class Protocol_>
uint32_t GroupGetObjectResp::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GroupGetObjectResp::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupGetObjectResp");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupGetObjectResp::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GroupGetObjectResp");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GroupGetObjectResp::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GroupGetObjectResp");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

}} // actor::cpp2