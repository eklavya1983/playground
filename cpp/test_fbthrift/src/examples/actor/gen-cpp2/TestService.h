/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/futures/Future.h>
#include "Service_types.h"
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>



namespace actor { namespace cpp2 {

class TestServiceSvAsyncIf {
 public:
  virtual ~TestServiceSvAsyncIf() {}
  virtual void async_tm_reqResp(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, std::unique_ptr<std::string> req) = 0;
  virtual void async_reqResp(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, std::unique_ptr<std::string> req) = delete;
  virtual folly::Future<std::unique_ptr<std::string>> future_reqResp(std::unique_ptr<std::string> req) = 0;
  virtual void async_tm_asyncReq(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, int64_t id, std::unique_ptr<std::string> payload) = 0;
  virtual void async_asyncReq(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, int64_t id, std::unique_ptr<std::string> payload) = delete;
  virtual folly::Future<void> future_asyncReq(int64_t id, std::unique_ptr<std::string> payload) = 0;
  virtual void async_tm_asyncResp(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, int64_t id, std::unique_ptr<std::string> payload) = 0;
  virtual void async_asyncResp(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, int64_t id, std::unique_ptr<std::string> payload) = delete;
  virtual folly::Future<void> future_asyncResp(int64_t id, std::unique_ptr<std::string> payload) = 0;
};

class TestServiceAsyncProcessor;

class TestServiceSvIf : public TestServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef TestServiceAsyncProcessor ProcessorType;

  virtual ~TestServiceSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_reqResp(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void reqResp(std::string& _return, std::unique_ptr<std::string> req);
  folly::Future<std::unique_ptr<std::string>> future_reqResp(std::unique_ptr<std::string> req);
  virtual void async_tm_reqResp(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, std::unique_ptr<std::string> req);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_asyncReq(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void asyncReq(int64_t id, std::unique_ptr<std::string> payload);
  folly::Future<void> future_asyncReq(int64_t id, std::unique_ptr<std::string> payload);
  virtual void async_tm_asyncReq(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, int64_t id, std::unique_ptr<std::string> payload);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_asyncResp(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void asyncResp(int64_t id, std::unique_ptr<std::string> payload);
  folly::Future<void> future_asyncResp(int64_t id, std::unique_ptr<std::string> payload);
  virtual void async_tm_asyncResp(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, int64_t id, std::unique_ptr<std::string> payload);
};

class TestServiceSvNull : public TestServiceSvIf {
 public:
  virtual ~TestServiceSvNull() {}
  virtual void reqResp(std::string& _return, std::unique_ptr<std::string> req);
  virtual void asyncReq(int64_t id, std::unique_ptr<std::string> payload);
  virtual void asyncResp(int64_t id, std::unique_ptr<std::string> payload);
};

class TestServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual std::string getServiceName();
 protected:
  TestServiceSvIf* iface_;
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods;
  typedef void (TestServiceAsyncProcessor::*binaryProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, binaryProcessFunction> binaryProcessMap;
  static TestServiceAsyncProcessor::binaryProcessMap binaryProcessMap_;
  typedef void (TestServiceAsyncProcessor::*compactProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::CompactProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, compactProcessFunction> compactProcessMap;
  static TestServiceAsyncProcessor::compactProcessMap compactProcessMap_;
  typedef void (TestServiceAsyncProcessor::*simple_jsonProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::SimpleJSONProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, simple_jsonProcessFunction> simple_jsonProcessMap;
  static TestServiceAsyncProcessor::simple_jsonProcessMap simple_jsonProcessMap_;
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_reqResp(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_reqResp(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_reqResp(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx, std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_reqResp(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_reqResp(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_asyncReq(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_asyncReq(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_asyncResp(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_asyncResp(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
 public:
  TestServiceAsyncProcessor(TestServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~TestServiceAsyncProcessor() {}
};

class TestServiceAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual std::string getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, apache::thrift::async::TDelayedDestruction::Destructor> channel_ptr;

  virtual ~TestServiceAsyncClient() {}

  TestServiceAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_ = std::unique_ptr<TClientBase::ConnContext>(new TClientBase::ConnContext(channel_->getHeader(),nullptr));
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }
  virtual void reqResp(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& req);
  virtual void callback_reqResp(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& req);
  virtual void reqResp(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& req);
  virtual void sync_reqResp(std::string& _return, const std::string& req);
  virtual void sync_reqResp(const apache::thrift::RpcOptions& rpcOptions, std::string& _return, const std::string& req);
  virtual void reqResp(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& req);
  virtual void functor_reqResp(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& req);
  virtual folly::Future<std::string> future_reqResp(const std::string& req);
  virtual folly::Future<std::string> future_reqResp(const apache::thrift::RpcOptions& rpcOptions, const std::string& req);
  static folly::exception_wrapper recv_wrapped_reqResp(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_reqResp(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_reqResp(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_reqResp(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void reqRespT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& req);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_reqRespT(Protocol_* prot, std::string& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_reqRespT(Protocol_* prot, std::string& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void asyncReq(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t id, const std::string& payload);
  virtual void callback_asyncReq(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t id, const std::string& payload);
  virtual void asyncReq(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t id, const std::string& payload);
  virtual void sync_asyncReq(int64_t id, const std::string& payload);
  virtual void sync_asyncReq(const apache::thrift::RpcOptions& rpcOptions, int64_t id, const std::string& payload);
  virtual void asyncReq(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t id, const std::string& payload);
  virtual void functor_asyncReq(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t id, const std::string& payload);
  virtual folly::Future<void> future_asyncReq(int64_t id, const std::string& payload);
  virtual folly::Future<void> future_asyncReq(const apache::thrift::RpcOptions& rpcOptions, int64_t id, const std::string& payload);
  template <typename Protocol_>
  void asyncReqT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t id, const std::string& payload);
  virtual void asyncResp(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t id, const std::string& payload);
  virtual void callback_asyncResp(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t id, const std::string& payload);
  virtual void asyncResp(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t id, const std::string& payload);
  virtual void sync_asyncResp(int64_t id, const std::string& payload);
  virtual void sync_asyncResp(const apache::thrift::RpcOptions& rpcOptions, int64_t id, const std::string& payload);
  virtual void asyncResp(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t id, const std::string& payload);
  virtual void functor_asyncResp(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t id, const std::string& payload);
  virtual folly::Future<void> future_asyncResp(int64_t id, const std::string& payload);
  virtual folly::Future<void> future_asyncResp(const apache::thrift::RpcOptions& rpcOptions, int64_t id, const std::string& payload);
  template <typename Protocol_>
  void asyncRespT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t id, const std::string& payload);
 protected:
  std::unique_ptr<apache::thrift::server::TConnectionContext>connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

class TestService_reqResp_pargs : private boost::totally_ordered<TestService_reqResp_pargs> {
 public:
  virtual ~TestService_reqResp_pargs() throw() {}

  std::string* req;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      req = false;
    }

    bool req;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class TestService_reqResp_presult : private boost::totally_ordered<TestService_reqResp_presult> {
 public:
  virtual ~TestService_reqResp_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class TestService_asyncReq_pargs : private boost::totally_ordered<TestService_asyncReq_pargs> {
 public:
  virtual ~TestService_asyncReq_pargs() throw() {}

  int64_t* id;
  std::string* payload;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      id = false;
      payload = false;
    }

    bool id;
    bool payload;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class TestService_asyncResp_pargs : private boost::totally_ordered<TestService_asyncResp_pargs> {
 public:
  virtual ~TestService_asyncResp_pargs() throw() {}

  int64_t* id;
  std::string* payload;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      id = false;
      payload = false;
    }

    bool id;
    bool payload;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

}} // actor::cpp2
namespace apache { namespace thrift {

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_reqResp_pargs>::write(Protocol* proto, const  ::actor::cpp2::TestService_reqResp_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_reqResp_pargs>::read(Protocol* proto,   ::actor::cpp2::TestService_reqResp_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_reqResp_pargs>::serializedSize(Protocol* proto, const  ::actor::cpp2::TestService_reqResp_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_reqResp_pargs>::serializedSizeZC(Protocol* proto, const  ::actor::cpp2::TestService_reqResp_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_reqResp_presult>::write(Protocol* proto, const  ::actor::cpp2::TestService_reqResp_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_reqResp_presult>::read(Protocol* proto,   ::actor::cpp2::TestService_reqResp_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_reqResp_presult>::serializedSize(Protocol* proto, const  ::actor::cpp2::TestService_reqResp_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_reqResp_presult>::serializedSizeZC(Protocol* proto, const  ::actor::cpp2::TestService_reqResp_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_asyncReq_pargs>::write(Protocol* proto, const  ::actor::cpp2::TestService_asyncReq_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_asyncReq_pargs>::read(Protocol* proto,   ::actor::cpp2::TestService_asyncReq_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_asyncReq_pargs>::serializedSize(Protocol* proto, const  ::actor::cpp2::TestService_asyncReq_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_asyncReq_pargs>::serializedSizeZC(Protocol* proto, const  ::actor::cpp2::TestService_asyncReq_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_asyncResp_pargs>::write(Protocol* proto, const  ::actor::cpp2::TestService_asyncResp_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_asyncResp_pargs>::read(Protocol* proto,   ::actor::cpp2::TestService_asyncResp_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_asyncResp_pargs>::serializedSize(Protocol* proto, const  ::actor::cpp2::TestService_asyncResp_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::TestService_asyncResp_pargs>::serializedSizeZC(Protocol* proto, const  ::actor::cpp2::TestService_asyncResp_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift