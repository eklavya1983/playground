/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ServiceApi.h"

#include "ServiceApi.tcc"

#include <thrift/lib/cpp2/protocol/DebugProtocol.h>
#include <thrift/lib/cpp2/protocol/VirtualProtocol.h>

namespace actor { namespace cpp2 {

std::string ServiceApiAsyncClient::getServiceName() {
  return "ServiceApi";
}

void ServiceApiAsyncClient::actorMessage(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  actorMessage(::apache::thrift::RpcOptions(), std::move(callback), header, payload);
}

void ServiceApiAsyncClient::callback_actorMessage(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  actorMessage(::apache::thrift::RpcOptions(), std::move(callback), header, payload);
}

void ServiceApiAsyncClient::actorMessage(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      actorMessageT(&writer, rpcOptions, std::move(callback), header, payload);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      actorMessageT(&writer, rpcOptions, std::move(callback), header, payload);
      break;
    }
    case apache::thrift::protocol::T_SIMPLE_JSON_PROTOCOL:
    {
      apache::thrift::SimpleJSONProtocolWriter writer;
      actorMessageT(&writer, rpcOptions, std::move(callback), header, payload);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void ServiceApiAsyncClient::sync_actorMessage(const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  sync_actorMessage(::apache::thrift::RpcOptions(), header, payload);
}

void ServiceApiAsyncClient::sync_actorMessage(const apache::thrift::RpcOptions& rpcOptions, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback39(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), true));
  actorMessage(rpcOptions, std::move(callback39), header, payload);
  getChannel()->getEventBase()->loopForever();
}

void ServiceApiAsyncClient::actorMessage(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  actorMessage(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),header,payload);
}

void ServiceApiAsyncClient::functor_actorMessage(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  actorMessage(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),header,payload);
}

folly::Future<void> ServiceApiAsyncClient::future_actorMessage(const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  return future_actorMessage(::apache::thrift::RpcOptions(), header, payload);
}

folly::Future<void> ServiceApiAsyncClient::future_actorMessage(const apache::thrift::RpcOptions& rpcOptions, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload) {
  folly::Promise<void> promise40;
  auto future41 = promise40.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback42(new apache::thrift::FutureCallback<void>(std::move(promise40), true));
  actorMessage(rpcOptions, std::move(callback42), header, payload);
  return std::move(future41);
}

template uint32_t ServiceApi_actorMessage_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ServiceApi_actorMessage_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ServiceApi_actorMessage_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ServiceApi_actorMessage_pargs::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ServiceApi_actorMessage_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);
}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift