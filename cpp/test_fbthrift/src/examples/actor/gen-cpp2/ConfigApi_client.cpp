/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ConfigApi.h"

#include "ConfigApi.tcc"

#include <thrift/lib/cpp2/protocol/DebugProtocol.h>
#include <thrift/lib/cpp2/protocol/VirtualProtocol.h>

namespace actor { namespace cpp2 {

std::string ConfigApiAsyncClient::getServiceName() {
  return "ConfigApi";
}

void ConfigApiAsyncClient::registerActorSystem(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorInfo& info) {
  registerActorSystem(::apache::thrift::RpcOptions(), std::move(callback), info);
}

void ConfigApiAsyncClient::callback_registerActorSystem(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorInfo& info) {
  registerActorSystem(::apache::thrift::RpcOptions(), std::move(callback), info);
}

void ConfigApiAsyncClient::registerActorSystem(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorInfo& info) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      registerActorSystemT(&writer, rpcOptions, std::move(callback), info);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      registerActorSystemT(&writer, rpcOptions, std::move(callback), info);
      break;
    }
    case apache::thrift::protocol::T_SIMPLE_JSON_PROTOCOL:
    {
      apache::thrift::SimpleJSONProtocolWriter writer;
      registerActorSystemT(&writer, rpcOptions, std::move(callback), info);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void ConfigApiAsyncClient::sync_registerActorSystem( ::actor::cpp2::ActorId& _return, const  ::actor::cpp2::ActorInfo& info) {
  sync_registerActorSystem(::apache::thrift::RpcOptions(), _return, info);
}

void ConfigApiAsyncClient::sync_registerActorSystem(const apache::thrift::RpcOptions& rpcOptions,  ::actor::cpp2::ActorId& _return, const  ::actor::cpp2::ActorInfo& info) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback49(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  registerActorSystem(rpcOptions, std::move(callback49), info);
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_registerActorSystem(_return, _returnState);
}

void ConfigApiAsyncClient::registerActorSystem(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::actor::cpp2::ActorInfo& info) {
  registerActorSystem(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),info);
}

void ConfigApiAsyncClient::functor_registerActorSystem(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::actor::cpp2::ActorInfo& info) {
  registerActorSystem(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),info);
}

folly::Future< ::actor::cpp2::ActorId> ConfigApiAsyncClient::future_registerActorSystem(const  ::actor::cpp2::ActorInfo& info) {
  return future_registerActorSystem(::apache::thrift::RpcOptions(), info);
}

folly::Future< ::actor::cpp2::ActorId> ConfigApiAsyncClient::future_registerActorSystem(const apache::thrift::RpcOptions& rpcOptions, const  ::actor::cpp2::ActorInfo& info) {
  folly::Promise< ::actor::cpp2::ActorId> promise50;
  auto future51 = promise50.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback52(new apache::thrift::FutureCallback< ::actor::cpp2::ActorId>(std::move(promise50), recv_wrapped_registerActorSystem));
  registerActorSystem(rpcOptions, std::move(callback52), info);
  return std::move(future51);
}

folly::exception_wrapper ConfigApiAsyncClient::recv_wrapped_registerActorSystem( ::actor::cpp2::ActorId& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_registerActorSystemT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_registerActorSystemT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_SIMPLE_JSON_PROTOCOL:
    {
      apache::thrift::SimpleJSONProtocolReader reader;
      return recv_wrapped_registerActorSystemT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void ConfigApiAsyncClient::recv_registerActorSystem( ::actor::cpp2::ActorId& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_registerActorSystem(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void ConfigApiAsyncClient::recv_instance_registerActorSystem( ::actor::cpp2::ActorId& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_registerActorSystem(_return, state);
}

folly::exception_wrapper ConfigApiAsyncClient::recv_instance_wrapped_registerActorSystem( ::actor::cpp2::ActorId& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_registerActorSystem(_return, state);
}

template uint32_t ConfigApi_registerActorSystem_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ConfigApi_registerActorSystem_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ConfigApi_registerActorSystem_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ConfigApi_registerActorSystem_pargs::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);
template uint32_t ConfigApi_registerActorSystem_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ConfigApi_registerActorSystem_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ConfigApi_registerActorSystem_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ConfigApi_registerActorSystem_presult::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ConfigApi_registerActorSystem_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);
}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift