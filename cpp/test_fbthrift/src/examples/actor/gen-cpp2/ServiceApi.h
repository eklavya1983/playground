/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/futures/Future.h>
#include "Service_types.h"
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>



namespace actor { namespace cpp2 {

class ServiceApiSvAsyncIf {
 public:
  virtual ~ServiceApiSvAsyncIf() {}
  virtual void async_tm_actorMessage(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, std::unique_ptr< ::actor::cpp2::ActorMsgHeader> header, std::unique_ptr< ::actor::cpp2::ActorMsgBuffer> payload) = 0;
  virtual void async_actorMessage(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, std::unique_ptr< ::actor::cpp2::ActorMsgHeader> header, std::unique_ptr< ::actor::cpp2::ActorMsgBuffer> payload) = delete;
  virtual folly::Future<void> future_actorMessage(std::unique_ptr< ::actor::cpp2::ActorMsgHeader> header, std::unique_ptr< ::actor::cpp2::ActorMsgBuffer> payload) = 0;
};

class ServiceApiAsyncProcessor;

class ServiceApiSvIf : public ServiceApiSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef ServiceApiAsyncProcessor ProcessorType;

  virtual ~ServiceApiSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_actorMessage(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void actorMessage(std::unique_ptr< ::actor::cpp2::ActorMsgHeader> header, std::unique_ptr< ::actor::cpp2::ActorMsgBuffer> payload);
  folly::Future<void> future_actorMessage(std::unique_ptr< ::actor::cpp2::ActorMsgHeader> header, std::unique_ptr< ::actor::cpp2::ActorMsgBuffer> payload);
  virtual void async_tm_actorMessage(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, std::unique_ptr< ::actor::cpp2::ActorMsgHeader> header, std::unique_ptr< ::actor::cpp2::ActorMsgBuffer> payload);
};

class ServiceApiSvNull : public ServiceApiSvIf {
 public:
  virtual ~ServiceApiSvNull() {}
  virtual void actorMessage(std::unique_ptr< ::actor::cpp2::ActorMsgHeader> header, std::unique_ptr< ::actor::cpp2::ActorMsgBuffer> payload);
};

class ServiceApiAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual std::string getServiceName();
 protected:
  ServiceApiSvIf* iface_;
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods;
  typedef void (ServiceApiAsyncProcessor::*binaryProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, binaryProcessFunction> binaryProcessMap;
  static ServiceApiAsyncProcessor::binaryProcessMap binaryProcessMap_;
  typedef void (ServiceApiAsyncProcessor::*compactProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::CompactProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, compactProcessFunction> compactProcessMap;
  static ServiceApiAsyncProcessor::compactProcessMap compactProcessMap_;
  typedef void (ServiceApiAsyncProcessor::*simple_jsonProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::SimpleJSONProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, simple_jsonProcessFunction> simple_jsonProcessMap;
  static ServiceApiAsyncProcessor::simple_jsonProcessMap simple_jsonProcessMap_;
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_actorMessage(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_actorMessage(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
 public:
  ServiceApiAsyncProcessor(ServiceApiSvIf* iface) :
      iface_(iface) {}

  virtual ~ServiceApiAsyncProcessor() {}
};

class ServiceApiAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual std::string getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, apache::thrift::async::TDelayedDestruction::Destructor> channel_ptr;

  virtual ~ServiceApiAsyncClient() {}

  ServiceApiAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_ = std::unique_ptr<TClientBase::ConnContext>(new TClientBase::ConnContext(channel_->getHeader(),nullptr));
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }
  virtual void actorMessage(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  virtual void callback_actorMessage(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  virtual void actorMessage(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  virtual void sync_actorMessage(const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  virtual void sync_actorMessage(const apache::thrift::RpcOptions& rpcOptions, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  virtual void actorMessage(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  virtual void functor_actorMessage(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  virtual folly::Future<void> future_actorMessage(const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  virtual folly::Future<void> future_actorMessage(const apache::thrift::RpcOptions& rpcOptions, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
  template <typename Protocol_>
  void actorMessageT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::actor::cpp2::ActorMsgHeader& header, const  ::actor::cpp2::ActorMsgBuffer& payload);
 protected:
  std::unique_ptr<apache::thrift::server::TConnectionContext>connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

class ServiceApi_actorMessage_pargs : private boost::totally_ordered<ServiceApi_actorMessage_pargs> {
 public:
  virtual ~ServiceApi_actorMessage_pargs() throw() {}

   ::actor::cpp2::ActorMsgHeader* header;
   ::actor::cpp2::ActorMsgBuffer* payload;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      header = false;
      payload = false;
    }

    bool header;
    bool payload;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

}} // actor::cpp2
namespace apache { namespace thrift {

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::ServiceApi_actorMessage_pargs>::write(Protocol* proto, const  ::actor::cpp2::ServiceApi_actorMessage_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::ServiceApi_actorMessage_pargs>::read(Protocol* proto,   ::actor::cpp2::ServiceApi_actorMessage_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::ServiceApi_actorMessage_pargs>::serializedSize(Protocol* proto, const  ::actor::cpp2::ServiceApi_actorMessage_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::actor::cpp2::ServiceApi_actorMessage_pargs>::serializedSizeZC(Protocol* proto, const  ::actor::cpp2::ServiceApi_actorMessage_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift