/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TestService.h"

#include "TestService.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>
namespace actor { namespace cpp2 {

std::unique_ptr<apache::thrift::AsyncProcessor> TestServiceSvIf::getProcessor() {
  return std::unique_ptr<apache::thrift::AsyncProcessor>(new TestServiceAsyncProcessor((TestServiceSvIf*)this));
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY TestServiceSvIf::getprio_reqResp(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio54 = reqCtx->getCallPriority();
  if (prio54 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio54;
  }
  return apache::thrift::concurrency::NORMAL;
}

void TestServiceSvIf::reqResp(std::string& _return, std::unique_ptr<std::string> req) {
  throw apache::thrift::TApplicationException("Function reqResp is unimplemented");
}

folly::Future<std::unique_ptr<std::string>> TestServiceSvIf::future_reqResp(std::unique_ptr<std::string> req) {
  folly::Promise<std::unique_ptr<std::string>> promise55;
  try {
    std::unique_ptr<std::string> _return(new std::string);
    reqResp(*_return, std::move(req));
    promise55.setValue(std::move(_return));
  } catch(const std::exception& ex) {
    promise55.setException(folly::exception_wrapper(std::current_exception()));
  }
  return promise55.getFuture();
}

void TestServiceSvIf::async_tm_reqResp(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, std::unique_ptr<std::string> req) {
  auto callbackp = callback.release();
  setEventBase(callbackp->getEventBase());
  setThreadManager(callbackp->getThreadManager());
  auto tmp_move_req56 = std::move(req);
  auto move_req57 = folly::makeMoveWrapper(std::move(tmp_move_req56));
  setConnectionContext(callbackp->getConnectionContext());
  try {
    auto future58 = future_reqResp(std::move(*move_req57));
    future58.then([=](folly::Try<std::unique_ptr<std::string>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY TestServiceSvIf::getprio_asyncReq(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio59 = reqCtx->getCallPriority();
  if (prio59 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio59;
  }
  return apache::thrift::concurrency::NORMAL;
}

void TestServiceSvIf::asyncReq(int64_t id, std::unique_ptr<std::string> payload) {
  throw apache::thrift::TApplicationException("Function asyncReq is unimplemented");
}

folly::Future<void> TestServiceSvIf::future_asyncReq(int64_t id, std::unique_ptr<std::string> payload) {
  folly::Promise<void> promise60;
  try {
    asyncReq(id, std::move(payload));
    promise60.setValue();
  } catch(const std::exception& ex) {
    promise60.setException(folly::exception_wrapper(std::current_exception()));
  }
  return promise60.getFuture();
}

void TestServiceSvIf::async_tm_asyncReq(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, int64_t id, std::unique_ptr<std::string> payload) {
  auto callbackp = callback.release();
  setEventBase(callbackp->getEventBase());
  setThreadManager(callbackp->getThreadManager());
  auto tmp_move_payload61 = std::move(payload);
  auto move_payload62 = folly::makeMoveWrapper(std::move(tmp_move_payload61));
  setConnectionContext(callbackp->getConnectionContext());
  try {
    auto future63 = future_asyncReq(id, std::move(*move_payload62));
    delete callbackp;
  } catch(const std::exception& ex) {
    delete callbackp;
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY TestServiceSvIf::getprio_asyncResp(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio64 = reqCtx->getCallPriority();
  if (prio64 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio64;
  }
  return apache::thrift::concurrency::NORMAL;
}

void TestServiceSvIf::asyncResp(int64_t id, std::unique_ptr<std::string> payload) {
  throw apache::thrift::TApplicationException("Function asyncResp is unimplemented");
}

folly::Future<void> TestServiceSvIf::future_asyncResp(int64_t id, std::unique_ptr<std::string> payload) {
  folly::Promise<void> promise65;
  try {
    asyncResp(id, std::move(payload));
    promise65.setValue();
  } catch(const std::exception& ex) {
    promise65.setException(folly::exception_wrapper(std::current_exception()));
  }
  return promise65.getFuture();
}

void TestServiceSvIf::async_tm_asyncResp(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback, int64_t id, std::unique_ptr<std::string> payload) {
  auto callbackp = callback.release();
  setEventBase(callbackp->getEventBase());
  setThreadManager(callbackp->getThreadManager());
  auto tmp_move_payload66 = std::move(payload);
  auto move_payload67 = folly::makeMoveWrapper(std::move(tmp_move_payload66));
  setConnectionContext(callbackp->getConnectionContext());
  try {
    auto future68 = future_asyncResp(id, std::move(*move_payload67));
    delete callbackp;
  } catch(const std::exception& ex) {
    delete callbackp;
  }
}

void TestServiceSvNull::reqResp(std::string& _return, std::unique_ptr<std::string> req) {}

void TestServiceSvNull::asyncReq(int64_t id, std::unique_ptr<std::string> payload) {}

void TestServiceSvNull::asyncResp(int64_t id, std::unique_ptr<std::string> payload) {}

std::string TestServiceAsyncProcessor::getServiceName() {
  return "TestService";
}

void TestServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot(new apache::thrift::BinaryProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = binaryProcessMap_.find(fname);
      if (pfn == binaryProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::CompactProtocolReader> iprot(new apache::thrift::CompactProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = compactProcessMap_.find(fname);
      if (pfn == compactProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    case apache::thrift::protocol::T_SIMPLE_JSON_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::SimpleJSONProtocolReader> iprot(new apache::thrift::SimpleJSONProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::SimpleJSONProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::SimpleJSONProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = simple_jsonProcessMap_.find(fname);
      if (pfn == simple_jsonProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::SimpleJSONProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      return;
      break;
    }
  }
}

bool TestServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  apache::thrift::protocol::PROTOCOL_TYPES protType = static_cast<apache::thrift::protocol::PROTOCOL_TYPES>(header->getProtocolId());
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    case apache::thrift::protocol::T_SIMPLE_JSON_PROTOCOL:
    {
      apache::thrift::SimpleJSONProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      break;
    }
  }
  return false;
}

std::unordered_set<std::string> TestServiceAsyncProcessor::onewayMethods {
  "asyncReq",
  "asyncResp"
};
TestServiceAsyncProcessor::binaryProcessMap TestServiceAsyncProcessor::binaryProcessMap_ {
  {"reqResp", &TestServiceAsyncProcessor::_processInThread_reqResp<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"asyncReq", &TestServiceAsyncProcessor::_processInThread_asyncReq<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"asyncResp", &TestServiceAsyncProcessor::_processInThread_asyncResp<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
TestServiceAsyncProcessor::compactProcessMap TestServiceAsyncProcessor::compactProcessMap_ {
  {"reqResp", &TestServiceAsyncProcessor::_processInThread_reqResp<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"asyncReq", &TestServiceAsyncProcessor::_processInThread_asyncReq<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"asyncResp", &TestServiceAsyncProcessor::_processInThread_asyncResp<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};
TestServiceAsyncProcessor::simple_jsonProcessMap TestServiceAsyncProcessor::simple_jsonProcessMap_ {
  {"reqResp", &TestServiceAsyncProcessor::_processInThread_reqResp<apache::thrift::SimpleJSONProtocolReader, apache::thrift::SimpleJSONProtocolWriter>},
  {"asyncReq", &TestServiceAsyncProcessor::_processInThread_asyncReq<apache::thrift::SimpleJSONProtocolReader, apache::thrift::SimpleJSONProtocolWriter>},
  {"asyncResp", &TestServiceAsyncProcessor::_processInThread_asyncResp<apache::thrift::SimpleJSONProtocolReader, apache::thrift::SimpleJSONProtocolWriter>}
};

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift