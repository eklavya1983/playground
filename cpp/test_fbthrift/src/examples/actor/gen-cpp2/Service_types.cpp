/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Service_types.h"

#include "Service_types.tcc"

#include <algorithm>

namespace actor { namespace cpp2 {

Error _kErrorValues[] = {
  Error::ERR_OK,
  Error::ERR_INVALID
};

const char* _kErrorNames[] = {
  "ERR_OK",
  "ERR_INVALID"
};

const std::map<Error, const char*> _Error_VALUES_TO_NAMES(apache::thrift::TEnumIterator<Error>(2, _kErrorValues, _kErrorNames), apache::thrift::TEnumIterator<Error>(-1, nullptr, nullptr));
const std::map<const char*, Error, apache::thrift::ltstr> _Error_NAMES_TO_VALUES(apache::thrift::TEnumInverseIterator<Error>(2, _kErrorValues, _kErrorNames), apache::thrift::TEnumInverseIterator<Error>(-1, nullptr, nullptr));

}} // actor::cpp2
namespace apache { namespace thrift {

template <> const char* TEnumTraitsBase< ::actor::cpp2::Error>::findName( ::actor::cpp2::Error value) {
  return findName( ::actor::cpp2::_Error_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::actor::cpp2::Error>::findValue(const char* name,  ::actor::cpp2::Error* outValue) {
  return findValue( ::actor::cpp2::_Error_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t ActorId::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ActorId::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorId::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorId::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorId::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ActorId::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorId::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorId::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorId::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ActorId::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorId::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorId::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorId::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ActorId::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void ActorId::__clear() {
  systemId = 0;
  localId = 0;
  __isset.__clear();
}

bool ActorId::operator==(const ActorId& rhs) const {
  if (!((systemId == rhs.systemId))) {
    return false;
  }
  if (!((localId == rhs.localId))) {
    return false;
  }
  return true;
}

void swap(ActorId& a, ActorId& b) {
  using ::std::swap;
  swap(a.systemId, b.systemId);
  swap(a.localId, b.localId);
  swap(a.__isset, b.__isset);
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t ActorMsgHeader::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ActorMsgHeader::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorMsgHeader::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorMsgHeader::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorMsgHeader::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ActorMsgHeader::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorMsgHeader::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorMsgHeader::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorMsgHeader::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ActorMsgHeader::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorMsgHeader::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorMsgHeader::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorMsgHeader::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ActorMsgHeader::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void ActorMsgHeader::__clear() {
  direction = 0;
  typeId = 0;
  ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::clear(&from);
  ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::clear(&to);
  requestId = 0;
  status = 0;
  __isset.__clear();
}

bool ActorMsgHeader::operator==(const ActorMsgHeader& rhs) const {
  if (!((direction == rhs.direction))) {
    return false;
  }
  if (!((typeId == rhs.typeId))) {
    return false;
  }
  if (!((from == rhs.from))) {
    return false;
  }
  if (!((to == rhs.to))) {
    return false;
  }
  if (!((requestId == rhs.requestId))) {
    return false;
  }
  if (!((status == rhs.status))) {
    return false;
  }
  return true;
}

void swap(ActorMsgHeader& a, ActorMsgHeader& b) {
  using ::std::swap;
  swap(a.direction, b.direction);
  swap(a.typeId, b.typeId);
  swap(a.from, b.from);
  swap(a.to, b.to);
  swap(a.requestId, b.requestId);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t ReplicaGroupInfo::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ReplicaGroupInfo::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ReplicaGroupInfo::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ReplicaGroupInfo::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ReplicaGroupInfo::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void ReplicaGroupInfo::__clear() {
  replicaId = 0;
  version = 0;
  replicaServices.clear();
  healthyServices.clear();
  unhealthyServices.clear();
  __isset.__clear();
}

bool ReplicaGroupInfo::operator==(const ReplicaGroupInfo& rhs) const {
  if (!((replicaId == rhs.replicaId))) {
    return false;
  }
  if (!((version == rhs.version))) {
    return false;
  }
  if (!((replicaServices == rhs.replicaServices))) {
    return false;
  }
  if (!((healthyServices == rhs.healthyServices))) {
    return false;
  }
  if (!((unhealthyServices == rhs.unhealthyServices))) {
    return false;
  }
  return true;
}

void swap(ReplicaGroupInfo& a, ReplicaGroupInfo& b) {
  using ::std::swap;
  swap(a.replicaId, b.replicaId);
  swap(a.version, b.version);
  swap(a.replicaServices, b.replicaServices);
  swap(a.healthyServices, b.healthyServices);
  swap(a.unhealthyServices, b.unhealthyServices);
  swap(a.__isset, b.__isset);
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t ReplicaRequestHeader::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ReplicaRequestHeader::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ReplicaRequestHeader::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ReplicaRequestHeader::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ReplicaRequestHeader::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void ReplicaRequestHeader::__clear() {
  ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorMsgHeader>::clear(&actorHdr);
  replicaId = 0;
  version = 0;
  __isset.__clear();
}

bool ReplicaRequestHeader::operator==(const ReplicaRequestHeader& rhs) const {
  if (!((actorHdr == rhs.actorHdr))) {
    return false;
  }
  if (!((replicaId == rhs.replicaId))) {
    return false;
  }
  if (!((version == rhs.version))) {
    return false;
  }
  return true;
}

void swap(ReplicaRequestHeader& a, ReplicaRequestHeader& b) {
  using ::std::swap;
  swap(a.actorHdr, b.actorHdr);
  swap(a.replicaId, b.replicaId);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t ActorInfo::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ActorInfo::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorInfo::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorInfo::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ActorInfo::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ActorInfo::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorInfo::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorInfo::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ActorInfo::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ActorInfo::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorInfo::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorInfo::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ActorInfo::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ActorInfo::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void ActorInfo::__clear() {
  type = std::string();
  ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorId>::clear(&id);
  ip = std::string();
  port = 0;
  incarnation = 0;
  __isset.__clear();
}

bool ActorInfo::operator==(const ActorInfo& rhs) const {
  if (!((type == rhs.type))) {
    return false;
  }
  if (!((id == rhs.id))) {
    return false;
  }
  if (!((ip == rhs.ip))) {
    return false;
  }
  if (!((port == rhs.port))) {
    return false;
  }
  if (!((incarnation == rhs.incarnation))) {
    return false;
  }
  return true;
}

void swap(ActorInfo& a, ActorInfo& b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.id, b.id);
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.incarnation, b.incarnation);
  swap(a.__isset, b.__isset);
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t Init::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t Init::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Init::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Init::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Init::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t Init::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Init::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Init::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Init::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t Init::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Init::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Init::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Init::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t Init::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool Init::operator==(const Init& /* rhs */) const {
  return true;
}

void swap(Init& a, Init& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t Other::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t Other::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Other::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Other::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Other::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t Other::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Other::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Other::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Other::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t Other::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Other::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Other::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Other::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t Other::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool Other::operator==(const Other& /* rhs */) const {
  return true;
}

void swap(Other& a, Other& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t GetActorRegistry::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GetActorRegistry::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetActorRegistry::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetActorRegistry::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetActorRegistry::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GetActorRegistry::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetActorRegistry::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetActorRegistry::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetActorRegistry::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t GetActorRegistry::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GetActorRegistry::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GetActorRegistry::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GetActorRegistry::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GetActorRegistry::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool GetActorRegistry::operator==(const GetActorRegistry& /* rhs */) const {
  return true;
}

void swap(GetActorRegistry& a, GetActorRegistry& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t GetActorRegistryResp::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GetActorRegistryResp::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetActorRegistryResp::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetActorRegistryResp::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetActorRegistryResp::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GetActorRegistryResp::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetActorRegistryResp::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetActorRegistryResp::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetActorRegistryResp::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t GetActorRegistryResp::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GetActorRegistryResp::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GetActorRegistryResp::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GetActorRegistryResp::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GetActorRegistryResp::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GetActorRegistryResp::__clear() {
  infoList.clear();
  __isset.__clear();
}

bool GetActorRegistryResp::operator==(const GetActorRegistryResp& rhs) const {
  if (!((infoList == rhs.infoList))) {
    return false;
  }
  return true;
}

void swap(GetActorRegistryResp& a, GetActorRegistryResp& b) {
  using ::std::swap;
  swap(a.infoList, b.infoList);
  swap(a.__isset, b.__isset);
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t UpdateActorRegistry::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t UpdateActorRegistry::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UpdateActorRegistry::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UpdateActorRegistry::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UpdateActorRegistry::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t UpdateActorRegistry::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UpdateActorRegistry::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UpdateActorRegistry::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UpdateActorRegistry::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t UpdateActorRegistry::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t UpdateActorRegistry::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t UpdateActorRegistry::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t UpdateActorRegistry::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t UpdateActorRegistry::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool UpdateActorRegistry::operator==(const UpdateActorRegistry& /* rhs */) const {
  return true;
}

void swap(UpdateActorRegistry& a, UpdateActorRegistry& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t UpdateActorInfo::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t UpdateActorInfo::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UpdateActorInfo::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UpdateActorInfo::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UpdateActorInfo::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t UpdateActorInfo::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UpdateActorInfo::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UpdateActorInfo::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UpdateActorInfo::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t UpdateActorInfo::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t UpdateActorInfo::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t UpdateActorInfo::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t UpdateActorInfo::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t UpdateActorInfo::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void UpdateActorInfo::__clear() {
  ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ActorInfo>::clear(&info);
  __isset.__clear();
}

bool UpdateActorInfo::operator==(const UpdateActorInfo& rhs) const {
  if (!((info == rhs.info))) {
    return false;
  }
  return true;
}

void swap(UpdateActorInfo& a, UpdateActorInfo& b) {
  using ::std::swap;
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t RegisterException::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t RegisterException::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RegisterException::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RegisterException::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RegisterException::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t RegisterException::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RegisterException::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RegisterException::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RegisterException::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t RegisterException::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t RegisterException::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t RegisterException::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t RegisterException::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t RegisterException::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool RegisterException::operator==(const RegisterException& /* rhs */) const {
  return true;
}

void swap(RegisterException& a, RegisterException& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t GroupAddVolume::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GroupAddVolume::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupAddVolume::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupAddVolume::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupAddVolume::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GroupAddVolume::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupAddVolume::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupAddVolume::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupAddVolume::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t GroupAddVolume::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupAddVolume::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupAddVolume::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupAddVolume::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GroupAddVolume::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GroupAddVolume::__clear() {
  ::apache::thrift::Cpp2Ops<  ::actor::cpp2::ReplicaGroupInfo>::clear(&replicaInfo);
  volumeId = 0;
  volumeName = std::string();
  __isset.__clear();
}

bool GroupAddVolume::operator==(const GroupAddVolume& rhs) const {
  if (!((replicaInfo == rhs.replicaInfo))) {
    return false;
  }
  if (!((volumeId == rhs.volumeId))) {
    return false;
  }
  if (!((volumeName == rhs.volumeName))) {
    return false;
  }
  return true;
}

void swap(GroupAddVolume& a, GroupAddVolume& b) {
  using ::std::swap;
  swap(a.replicaInfo, b.replicaInfo);
  swap(a.volumeId, b.volumeId);
  swap(a.volumeName, b.volumeName);
  swap(a.__isset, b.__isset);
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t GroupPutObject::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GroupPutObject::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupPutObject::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupPutObject::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupPutObject::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GroupPutObject::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupPutObject::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupPutObject::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupPutObject::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t GroupPutObject::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupPutObject::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupPutObject::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupPutObject::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GroupPutObject::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool GroupPutObject::operator==(const GroupPutObject& /* rhs */) const {
  return true;
}

void swap(GroupPutObject& a, GroupPutObject& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t GroupPutObjectResp::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GroupPutObjectResp::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupPutObjectResp::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupPutObjectResp::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupPutObjectResp::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GroupPutObjectResp::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupPutObjectResp::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupPutObjectResp::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupPutObjectResp::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t GroupPutObjectResp::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupPutObjectResp::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupPutObjectResp::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupPutObjectResp::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GroupPutObjectResp::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool GroupPutObjectResp::operator==(const GroupPutObjectResp& /* rhs */) const {
  return true;
}

void swap(GroupPutObjectResp& a, GroupPutObjectResp& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t GroupGetObject::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GroupGetObject::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupGetObject::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupGetObject::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupGetObject::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GroupGetObject::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupGetObject::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupGetObject::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupGetObject::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t GroupGetObject::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupGetObject::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupGetObject::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupGetObject::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GroupGetObject::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool GroupGetObject::operator==(const GroupGetObject& /* rhs */) const {
  return true;
}

void swap(GroupGetObject& a, GroupGetObject& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

template uint32_t GroupGetObjectResp::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GroupGetObjectResp::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupGetObjectResp::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupGetObjectResp::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GroupGetObjectResp::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GroupGetObjectResp::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupGetObjectResp::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupGetObjectResp::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GroupGetObjectResp::read<apache::thrift::SimpleJSONProtocolReader>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t GroupGetObjectResp::write<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupGetObjectResp::serializedSize<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupGetObjectResp::serializedSizeZC<apache::thrift::SimpleJSONProtocolWriter>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t GroupGetObjectResp::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GroupGetObjectResp::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool GroupGetObjectResp::operator==(const GroupGetObjectResp& /* rhs */) const {
  return true;
}

void swap(GroupGetObjectResp& a, GroupGetObjectResp& b) {
  using ::std::swap;
}

}} // actor::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace actor { namespace cpp2 {

}} // actor::cpp2